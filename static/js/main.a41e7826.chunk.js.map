{"version":3,"sources":["patrick.jpg","Classes/Counter.ts","utils/getValueGenerator.ts","Components/Transmitter/Transmitter.tsx","Components/Receiver/Receiver.tsx","Components/Pair/Pair.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Counter","startingValue","count","increment","this","getValueGenerator","generator","seed","rng","seedrandom","toString","counter","Transmitter","props","interval","pressStartTime","timeout","valueGenerator","autoPress","onPress","setTimeout","onLift","e","preventDefault","Date","getTime","clearTimeout","inRange","clickTransmitterCallback","state","nextValue","setState","pressed","showValue","value","pressTime","window","clearInterval","prevProps","reset","kioskMode","autoPlay","setInterval","openSesame","className","icon","faSatelliteDish","onMouseDown","onMouseUp","onMouseLeave","onTouchStart","onTouchEnd","onTouchCancel","faLockOpen","faLock","React","Component","Receiver","generateList","list","length","listSize","push","verifyValue","locked","index","indexOf","slice","getGeneratedValues","transmitterMessage","Fragment","map","valueIndex","key","status","Pair","observer","ref","observerCallback","entries","isIntersecting","changeGenerator","target","getSettings","onChange","type","checked","onClick","faUndo","title","createRef","current","options","root","document","querySelector","threshold","IntersectionObserver","observe","disconnect","App","id","href","rel","faGithub","src","patrick","alt","faKey","faCarSide","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a41e7826.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/patrick.1fa52c93.jpg\";","export default class Counter {\r\n  constructor(startingValue:number=0) {\r\n    this.count = startingValue\r\n  }\r\n\r\n  count:number = 0\r\n\r\n  increment = ():number => ++this.count\r\n}\r\n","import seedrandom from \"seedrandom\"\r\nimport Counter from \"Classes/Counter\"\r\n\r\nexport type GeneratorType = \"counter\" | \"rng\" | \"openSesame\"\r\n\r\nexport type ValueGeneratorType = () => string\r\n\r\nexport default function getValueGenerator(\r\n  generator: GeneratorType,\r\n  seed: number,\r\n):ValueGeneratorType {\r\n  if(generator === \"openSesame\") {\r\n    return () => \"Open Sesame\"\r\n  }\r\n  else if(generator === \"rng\") {\r\n    const rng = seedrandom(seed.toString())\r\n    return () => (1000000000000000000*rng()).toString()\r\n  }\r\n\r\n  const counter = new Counter()\r\n  return () => counter.increment().toString()\r\n}\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSatelliteDish, faLock, faLockOpen } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport getValueGenerator, { GeneratorType, ValueGeneratorType } from \"utils/getValueGenerator\"\r\nimport \"./transmitter.scss\"\r\n\r\ninterface Props {\r\n  autoPlay: boolean,\r\n  clickTransmitterCallback: (value:string) => void,\r\n  generator: GeneratorType,\r\n  inRange: boolean,\r\n  kioskMode: boolean,\r\n  openSesame?: boolean,\r\n  reset: boolean,\r\n  seed: number,\r\n}\r\n\r\ninterface State {\r\n  nextValue: string,\r\n  pressed: boolean,\r\n  showValue: boolean,\r\n  value: string,\r\n}\r\n\r\nexport default class Transmitter extends React.Component<Props,State> {\r\n  interval?:number\r\n  pressStartTime: number\r\n  timeout: number\r\n  valueGenerator: ValueGeneratorType\r\n\r\n  constructor(props:Props) {\r\n    super(props)\r\n\r\n    this.pressStartTime = -1\r\n    this.timeout = -1\r\n    this.valueGenerator = getValueGenerator(props.generator, props.seed)\r\n\r\n    this.state = {\r\n      nextValue: this.valueGenerator(),\r\n      pressed: false,\r\n      showValue: false,\r\n      value: \"\",\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval)\r\n  }\r\n\r\n  componentDidUpdate(prevProps:Props) {\r\n    //if our generator has changed OR if we need to reset\r\n    if(\r\n      prevProps.generator !== this.props.generator\r\n      || prevProps.reset !== this.props.reset\r\n    ) {\r\n      this.valueGenerator = getValueGenerator(this.props.generator, this.props.seed) //set the generator\r\n\r\n      this.setState({\r\n        nextValue: this.valueGenerator(), //calculate the next value\r\n        showValue: false,\r\n        value: \"\",\r\n      })\r\n    }\r\n\r\n    //we should start or stop autoplaying\r\n    if(\r\n      this.props.kioskMode //if we are in kiosk mode\r\n      && prevProps.autoPlay !== this.props.autoPlay //if our autoplay mode has changed\r\n    ) {\r\n      //if we should start autoplaying\r\n      if(this.props.autoPlay) {\r\n        this.autoPress()\r\n        this.interval = window.setInterval(\r\n          this.autoPress,\r\n          3000,\r\n        )\r\n      }\r\n      else {\r\n        clearInterval(this.interval) //stop autoplaying\r\n      }\r\n    }\r\n  }\r\n\r\n  autoPress = () => {\r\n    this.onPress()\r\n    setTimeout(\r\n      this.onLift,\r\n      500,\r\n    )\r\n  }\r\n\r\n  onPress = (e?: React.MouseEvent | React.TouchEvent) => {\r\n    if(e) {\r\n      e.preventDefault()\r\n    }\r\n\r\n    this.pressStartTime = new Date().getTime()\r\n    clearTimeout(this.timeout)\r\n\r\n    if(this.props.inRange) { //if the listener is in range\r\n      this.props.clickTransmitterCallback(this.state.nextValue) //send the next value to the parent\r\n    }\r\n\r\n    this.setState({\r\n      nextValue: this.valueGenerator(), //calculate the next value\r\n      pressed: true,\r\n      showValue: true,\r\n      value: this.state.nextValue,\r\n    })\r\n  }\r\n\r\n  onLift = (e?: React.MouseEvent | React.TouchEvent) => {\r\n    if(e) {\r\n      e.preventDefault()\r\n    }\r\n\r\n    const pressTime = new Date().getTime() - this.pressStartTime\r\n\r\n    this.timeout = window.setTimeout(\r\n      () => this.setState({ showValue: false }),\r\n      1000 - pressTime,\r\n    )\r\n\r\n    this.setState({ pressed: false })\r\n  }\r\n\r\n\r\n  render() {\r\n    const {\r\n      generator,\r\n      openSesame,\r\n    } = this.props\r\n\r\n    const {\r\n      nextValue,\r\n      showValue,\r\n      value,\r\n    } = this.state\r\n\r\n    return (\r\n      <div className=\"transmitter\">\r\n        <div className={`value ${generator}` + (showValue?\" show\":\"\")}>\r\n          <span>{value ||  \"-\"}</span>\r\n          <FontAwesomeIcon icon={faSatelliteDish}/>\r\n        </div>\r\n\r\n        <div className={\"nextValue\" + (showValue?\"\":\" show\") + (openSesame?\" openSesame\":\"\")}>\r\n          <b>Next Value: </b>{nextValue}\r\n        </div>\r\n\r\n        <br/>\r\n\r\n        <div className=\"keyContainer\">\r\n          <div className={\"key\" + (this.state.pressed?\" pressed\":\"\")}>\r\n            <span className=\"led\"></span>\r\n            <button\r\n              onMouseDown={this.onPress}\r\n              onMouseUp={this.onLift}\r\n              onMouseLeave={this.onLift}\r\n              onTouchStart={this.onPress}\r\n              onTouchEnd={this.onLift}\r\n              onTouchCancel={this.onLift}\r\n            >\r\n              <FontAwesomeIcon icon={faLockOpen}/> / <FontAwesomeIcon icon={faLock}/>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faLock, faLockOpen } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { TransmitterMessageType } from \"Components/Pair/Pair\"\r\nimport getValueGenerator, { GeneratorType, ValueGeneratorType } from \"utils/getValueGenerator\"\r\nimport \"./receiver.scss\"\r\n\r\ninterface Props {\r\n  generator: GeneratorType,\r\n  listSize: number,\r\n  openSesame?: boolean,\r\n  reset: boolean,\r\n  seed: number,\r\n  transmitterMessage: TransmitterMessageType,\r\n}\r\n\r\ninterface State {\r\n  list: string[],\r\n  locked: boolean,\r\n}\r\n\r\nexport default class Receiver extends React.Component<Props,State> {\r\n  valueGenerator: ValueGeneratorType\r\n\r\n  constructor(props:Props) {\r\n    super(props)\r\n\r\n    this.valueGenerator = getValueGenerator(props.generator, props.seed)\r\n\r\n    this.state = {\r\n      list: this.generateList([]),\r\n      locked: true,\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps:Props) {\r\n    if(\r\n      prevProps.generator !== this.props.generator\r\n      || prevProps.reset !== this.props.reset\r\n    ) {\r\n      this.valueGenerator = getValueGenerator(this.props.generator, this.props.seed)\r\n\r\n      this.setState({\r\n        list: this.generateList([]),\r\n        locked: true,\r\n      })\r\n    }\r\n    else if(prevProps.transmitterMessage !== this.props.transmitterMessage) { //if the transmitter value changed\r\n      setTimeout(\r\n        () => this.verifyValue(this.props.transmitterMessage.value),\r\n        1000\r\n      )\r\n    }\r\n  }\r\n\r\n  generateList = (list:string[]):string[] => {\r\n    //while the list is too short\r\n    while(list.length < this.props.listSize) {\r\n      list.push(this.valueGenerator()) //push a newly generated value\r\n    }\r\n\r\n    return list\r\n  }\r\n\r\n  verifyValue = (value:string) => {\r\n    const {\r\n      list,\r\n      locked,\r\n    } = this.state\r\n\r\n    const index = list.indexOf(value) //check whether the value is in the list\r\n\r\n    if(list[index]) { //if the value is in the list\r\n      this.setState({\r\n        list: this.generateList( // generate new values for the list\r\n          list.slice(index + 1) //slice off the beginning of the list, including the value\r\n        ),\r\n      })\r\n\r\n      this.setState({locked: !locked})\r\n    }\r\n  }\r\n\r\n  getGeneratedValues = () => {\r\n    const {\r\n      transmitterMessage,\r\n    } = this.props\r\n\r\n    if(!this.props.openSesame) {\r\n      return (\r\n        <React.Fragment>\r\n          <b>Generated Passcode List</b>\r\n          <div>\r\n            {this.state.list.map((value, valueIndex) =>\r\n              <div key={valueIndex} className={\"value\" + (value===transmitterMessage.value?\" valid\":\"\")}>{value}</div>\r\n            )}\r\n          </div>\r\n        </React.Fragment>\r\n      )\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      locked,\r\n    } = this.state\r\n\r\n    const status = locked ? \"Locked\" : \"Unlocked\"\r\n\r\n    return (\r\n      <div className=\"receiver\">\r\n        <div className={\"status \" + status}>Car is {status} <FontAwesomeIcon icon={locked ? faLock : faLockOpen}/></div>\r\n        <br/>\r\n\r\n        {this.getGeneratedValues()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUndo } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { GeneratorType } from \"utils/getValueGenerator\"\r\nimport Transmitter from \"Components/Transmitter/Transmitter\"\r\nimport Receiver from \"Components/Receiver/Receiver\"\r\nimport \"./pair.scss\"\r\n\r\ninterface PairProps {\r\n  kioskMode: boolean,\r\n  openSesame?: boolean,\r\n}\r\n\r\n\r\nexport type TransmitterMessageType = {\r\n  index: number,\r\n  value: string,\r\n}\r\n\r\ninterface PairState {\r\n  autoPlay: boolean,\r\n  generator: GeneratorType,\r\n  inRange: boolean,\r\n  reset: boolean, //use this field to induce resets in child components\r\n  seed: number,\r\n  transmitterMessage: TransmitterMessageType,\r\n}\r\n\r\nclass Pair extends React.Component<PairProps,PairState> {\r\n  observer?: IntersectionObserver\r\n  ref: React.RefObject<HTMLDivElement>\r\n\r\n  constructor(props:PairProps) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      autoPlay: false,\r\n      generator: props.openSesame ? \"openSesame\" : \"counter\",\r\n      inRange: true,\r\n      reset: false,\r\n      seed: new Date().getTime(),\r\n      transmitterMessage: {\r\n        index: -1,\r\n        value: \"\",\r\n      },\r\n    }\r\n\r\n    this.ref = React.createRef()\r\n  }\r\n\r\n  componentDidMount() {\r\n    //if we should intersection observe this element to autoplay\r\n    if(\r\n      this.props.kioskMode //if this is in kiosk mode\r\n      && this.ref.current //if our ref is ready\r\n    ) {\r\n      const options: IntersectionObserverInit = {\r\n        root: document.querySelector(\"#app\"),\r\n        threshold: 0.5,\r\n      }\r\n\r\n      //create the observer\r\n      this.observer = new IntersectionObserver(this.observerCallback, options)\r\n      this.observer.observe(this.ref.current)\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    //if we have an observer running\r\n    if(this.observer) {\r\n      this.observer.disconnect()\r\n    }\r\n  }\r\n\r\n  observerCallback = (entries:IntersectionObserverEntry[], observer:IntersectionObserver) => {\r\n    //if this is in kiosk mode\r\n    if(this.props.kioskMode) {\r\n      this.setState({autoPlay: entries[0].isIntersecting}) //set auto play to whether this element is visible\r\n    }\r\n  }\r\n\r\n  changeGenerator = (e:React.ChangeEvent<HTMLSelectElement>) => {\r\n    const value = e.target.value\r\n    if(value===\"rng\" || value===\"counter\") {\r\n      this.setState({\r\n        generator: value,\r\n        transmitterMessage: {\r\n          index: -1,\r\n          value: \"\",\r\n        },\r\n      })\r\n    }\r\n  }\r\n\r\n  clickTransmitterCallback = (value:string) => this.setState({\r\n    transmitterMessage: {\r\n      index: this.state.transmitterMessage.index + 1,\r\n      value,\r\n    },\r\n  })\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      inRange: true,\r\n      reset: !this.state.reset,\r\n      transmitterMessage: {\r\n        index: -1,\r\n        value: \"\",\r\n      },\r\n    })\r\n  }\r\n\r\n  getSettings = () => {\r\n    if(this.props.kioskMode === false) {\r\n      const {\r\n        generator,\r\n        inRange,\r\n      } = this.state\r\n\r\n      return (\r\n        <div className=\"controlBar\">\r\n          <div>\r\n            <div>\r\n              <b>Number Generator:</b>\r\n              &nbsp; <select value={generator} onChange={this.changeGenerator}>\r\n                <option value=\"counter\">Simple Counter</option>\r\n                <option value=\"rng\">Pseudo Random</option>\r\n              </select>\r\n            </div>\r\n\r\n            <div>\r\n              <b>In Range: </b> <input type=\"checkbox\" checked={inRange} onChange={e => this.setState({inRange: !inRange})}/>\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <button onClick={e => this.reset()}><FontAwesomeIcon icon={faUndo} title=\"Reset!\"/></button>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const {\r\n      kioskMode,\r\n      openSesame,\r\n    } = this.props\r\n\r\n    const {\r\n      autoPlay,\r\n      generator,\r\n      inRange,\r\n      reset,\r\n      seed,\r\n      transmitterMessage,\r\n    } = this.state\r\n\r\n    return (\r\n      <div className={\"pair\" + (kioskMode?\" kiosk\":\"\")} ref={this.ref}>\r\n        {this.getSettings()}\r\n\r\n        <div className={\"devices \" + (inRange?\"inRange\":\"outOfRange\")}>\r\n          <div>\r\n            <Transmitter\r\n              autoPlay={autoPlay}\r\n              clickTransmitterCallback={this.clickTransmitterCallback}\r\n              generator={generator}\r\n              inRange={inRange}\r\n              kioskMode={kioskMode}\r\n              openSesame={openSesame}\r\n              reset={reset}\r\n              seed={seed}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <Receiver\r\n              generator={generator}\r\n              listSize={openSesame ? 1 : 5}\r\n              openSesame={openSesame}\r\n              reset={reset}\r\n              seed={seed}\r\n              transmitterMessage={transmitterMessage}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pair;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\r\nimport { faKey, faCarSide } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport patrick from \"patrick.jpg\"\r\nimport Pair from \"Components/Pair/Pair\"\r\nimport 'App.scss';\r\n\r\nfunction App() {\r\n  return (\r\n    <div id=\"app\">\r\n      <header>\r\n        <a id=\"github\" href=\"https://github.com/harryli0088/rolling-code\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <FontAwesomeIcon icon={faGithub}/>\r\n        </a>\r\n        <h1>Rolling Code</h1>\r\n        <div><i>Securing keyless entry systems</i></div>\r\n      </header>\r\n\r\n      <section className=\"container\">\r\n        <div id=\"imgContainer\">\r\n          <img src={patrick} alt=\"Open Sesame\"/>\r\n        </div>\r\n\r\n        <br/>\r\n\r\n        <div>Keyless entry systems such as cars and garage doors allow us to remotely lock or unlock our belongings. With car keys, whenever we press a button to lock or unlock, our key broadcasts a signal out into the open, hoping that our car is in range to hear. But how is this system secured?</div>\r\n\r\n        <br/>\r\n\r\n        <Pair kioskMode={true} openSesame/>\r\n\r\n        <br/>\r\n\r\n        <div>Imagine we had to shout a passcode \"OPEN SESAME\" on the top of our lungs anytime we wanted to unlock our car! Anybody could listen then steal our car by repeating the same passcode (\"OPEN SESAME\")!</div>\r\n\r\n        <hr/>\r\n\r\n        <div><b>Rolling Code</b> is a system used to secure keyless entry systems. Instead of using the same passcode every time, Rolling Code systems deterministically generate single-use passcodes, so that no passcode will be repeated or reused.</div>\r\n\r\n        <br/>\r\n\r\n        <Pair kioskMode={true}/>\r\n\r\n        <br/>\r\n\r\n        <div>An example this is a simple counter. Both the transmitter (our key <FontAwesomeIcon icon={faKey}/>) and receiver (our car <FontAwesomeIcon icon={faCarSide}/>) start from 0 and will increment their counts by one. Everytime we press the key, the key sends out next the number (ie 1...2...3...). Our car will listen for these numbers and internally increment its own count (1...2...3...) whenever it hears the valid number, so that no number is ever repeated. <b>A passcode is only valid for one use, and will not be accepted again</b>. In order for this to work, both the transmitter and the receiver must:</div>\r\n        <ol>\r\n          <li>Agree on the same starting number (called a \"seed\")</li>\r\n          <li>Use the same function to deterministically generate successive numbers</li>\r\n        </ol>\r\n\r\n        <br/>\r\n\r\n        <div>This is why car keys need to \"pair\" or synchronize with the car first before being usable.</div>\r\n\r\n        <hr/>\r\n\r\n        <h3>Pseudo Random Number Generators</h3>\r\n\r\n        <div>Instead of using a simple counter, rolling code implementations can use <b>Pseudo Random Number Generators</b> (PRNGs). These PRNGs, given a seed, will deterministically generate successive numbers; ideally, the generated sequence of numbers will be unpredictable (ie close to random) and will be completely different given a different seed.</div>\r\n\r\n        <h3>Try it out yourself!</h3>\r\n\r\n        <Pair kioskMode={false}/>\r\n\r\n        <h3>Why does the car have a list of numbers?</h3>\r\n\r\n        <div>The car generates a list of numbers in case we press our key button when the car is not in range. Because our key generates numbers \"forwards\" and does not go back to previous numbers, our car must keep a list of future numbers that our key might send. When our key transmits a number in the middle of the list, our car will invalidate all previous numbers and generate new numbers to fill the list. In this simple example, if we press our key too many times, it will generate numbers beyond those in our car's list, and we will be permanantly locked out. Rolling Code systems, such as <a href=\"https://en.wikipedia.org/wiki/KeeLoq\" target=\"_blank\" rel=\"noopener noreferrer\">KeeLoq</a> can be designed to avoid this issue. Also, if lock and unlock are on separate buttons, both our key and car would each have 2 rolling code systems listening on different radio frequencies.</div>\r\n      </section>\r\n\r\n      <footer className=\"container\">\r\n        <p>Thank you to Andrew Nohawk for the inspiration, explanation, and real-life hacking examples! <a href=\"https://www.andrewmohawk.com/2016/02/05/bypassing-rolling-code-systems/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.andrewmohawk.com/2016/02/05/bypassing-rolling-code-systems/</a></p>\r\n\r\n        <p>Github Repo: <a href=\"https://github.com/harryli0088/rolling-code\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/harryli0088/rolling-code</a></p>\r\n\r\n        <p>\r\n          Read more about Rolling Code: <a href=\"https://en.wikipedia.org/wiki/Rolling_code\" target=\"_blank\" rel=\"noopener noreferrer\">https://en.wikipedia.org/wiki/Rolling_code</a>\r\n        </p>\r\n\r\n        <br/>\r\n        <p>Built using <a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">React</a> and <a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Typescript</a></p>\r\n        <p>Media icons: <a href=\"https://fontawesome.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Font Awesome</a></p>\r\n        <p>CSS Speech Bubbles: <a href=\"http://nicolasgallagher.com/pure-css-speech-bubbles/demo/\" target=\"_blank\" rel=\"noopener noreferrer\">http://nicolasgallagher.com/pure-css-speech-bubbles/demo/</a></p>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}